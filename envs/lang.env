(header (version . "0.0.5") (node-count . 39) (triple-count . 0))

(section nodes)
 true
 false
 quote
 lambda
 def
 tell
(curr (__builtin curr))
(jump (__builtin jump))
 ask
 _
 apply
 eval
 exec
 import
 if
(env-find (__builtin env_find))
 fexpr
 progn
(eq (__builtin eq))
(car (__builtin car))
(cdr (__builtin cdr))
(cons (__builtin cons))
(+ (__builtin add))
(- (__builtin sub))
(* (__builtin mul))
(/ (__builtin div))
(println (__builtin println))
 table-sym-node
 table-lnode
 let
(list-len (__builtin list_len))
 letrec
 table-sym-sexp
 vector
 set!
 anon
($ '$)
(env-jump (__builtin env_jump))

(section triples)

(section designation default)
($ ^37)
(* ^25)
(+ ^23)
(- ^24)
(/ ^26)
(_ ^10)
(anon ^36)
(apply ^11)
(ask ^9)
(car ^20)
(cdr ^21)
(cons ^22)
(curr ^7)
(def ^5)
(env-find ^16)
(env-jump ^38)
(eq ^19)
(eval ^12)
(exec ^13)
(false ^2)
(fexpr ^17)
(if ^15)
(import ^14)
(jump ^8)
(lambda ^4)
(let ^30)
(letrec ^32)
(list-len ^31)
(println ^27)
(progn ^18)
(quote ^3)
(set! ^35)
(table-lnode ^29)
(table-sym-node ^28)
(table-sym-sexp ^33)
(tell ^6)
(true ^1)
(vector ^34)

