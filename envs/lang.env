(header (version . "0.0.3") (node-count . 48) (triple-count . 0))

(section nodes)
(^0 ^0^13)
 ^1
 ^2
(^3 'RESERVED)
(^4 'RESERVED)
(^5 'RESERVED)
(^6 'RESERVED)
(^7 'RESERVED)
(^8 'RESERVED)
(^9 'RESERVED)
 true
 false
 quote
 lambda
 def
 tell
(curr (__builtin curr))
(jump (__builtin jump))
 ask
 _
 apply
 eval
 exec
 import
 if
(env-find (__builtin env_find))
 fexpr
 progn
(eq (__builtin eq))
(car (__builtin car))
(cdr (__builtin cdr))
(cons (__builtin cons))
(+ (__builtin add))
(- (__builtin sub))
(* (__builtin mul))
(/ (__builtin div))
(println (__builtin println))
 table-sym-node
 table-lnode
 let
(list-len (__builtin list_len))
 letrec
 table-sym-sexp
 vector
 set!
 anon
($ '$)
(env-jump (__builtin env_jump))

(section triples)

(section designation amlang)
(^42 table-sym-sexp)
(^45 anon)
(^29 car)
(^21 eval)
(^26 fexpr)
(^13 lambda)
(^27 progn)
(^36 println)
(^44 set!)
(^12 quote)
(^22 exec)
(^38 table-lnode)
(^41 letrec)
(^25 env-find)
(^14 def)
(^46 $)
(^37 table-sym-node)
(^17 jump)
(^23 import)
(^30 cdr)
(^35 /)
(^15 tell)
(^20 apply)
(^18 ask)
(^31 cons)
(^43 vector)
(^19 _)
(^32 +)
(^47 env-jump)
(^39 let)
(^24 if)
(^16 curr)
(^28 eq)
(^11 false)
(^33 -)
(^10 true)
(^34 *)
(^40 list-len)

