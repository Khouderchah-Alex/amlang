(header (version . "0.0.4") (node-count . 48) (triple-count . 0))

(section nodes)
(^0 ^0^13)
 ^1
 ^2
(^3 'RESERVED)
(^4 'RESERVED)
(^5 'RESERVED)
(^6 'RESERVED)
(^7 'RESERVED)
(^8 'RESERVED)
(^9 'RESERVED)
 true
 false
 quote
 lambda
 def
 tell
(curr (__builtin curr))
(jump (__builtin jump))
 ask
 _
 apply
 eval
 exec
 import
 if
(env-find (__builtin env_find))
 fexpr
 progn
(eq (__builtin eq))
(car (__builtin car))
(cdr (__builtin cdr))
(cons (__builtin cons))
(+ (__builtin add))
(- (__builtin sub))
(* (__builtin mul))
(/ (__builtin div))
(println (__builtin println))
 table-sym-node
 table-lnode
 let
(list-len (__builtin list_len))
 letrec
 table-sym-sexp
 vector
 set!
 anon
($ '$)
(env-jump (__builtin env_jump))

(section triples)

(section designation amlang)
($ ^46)
(* ^34)
(+ ^32)
(- ^33)
(/ ^35)
(_ ^19)
(anon ^45)
(apply ^20)
(ask ^18)
(car ^29)
(cdr ^30)
(cons ^31)
(curr ^16)
(def ^14)
(env-find ^25)
(env-jump ^47)
(eq ^28)
(eval ^21)
(exec ^22)
(false ^11)
(fexpr ^26)
(if ^24)
(import ^23)
(jump ^17)
(lambda ^13)
(let ^39)
(letrec ^41)
(list-len ^40)
(println ^36)
(progn ^27)
(quote ^12)
(set! ^44)
(table-lnode ^38)
(table-sym-node ^37)
(table-sym-sexp ^42)
(tell ^15)
(true ^10)
(vector ^43)

